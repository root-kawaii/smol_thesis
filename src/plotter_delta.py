import matplotlib.pyplot as plt
import numpy as np

# Generating some random data
np.random.seed(10)

x = ["15", "14", "13", "12", "11", "10", "9"]


# x = [
#     "16",
#     "15 - 0",
#     "14 - 2",
#     "13 - 14",
#     "12 - 13",
#     "11 - 9",
#     "10 - 11",
#     "9 - 10",
#     "8 - 4",
# ]

accuracy_1 = [
    0.993,
    0.9837786259542,
    0.98075699745547,
    0.97829198473282,
    0.9772582697201,
    0.96202290076336,
    0.95,
    0.94274809160305,
]

f1_1 = [
    0.985,
    0.9742539879908,
    0.96777892624749,
    0.9684566012379,
    0.96288219069893,
    0.9431183870378,
    0.92,
    0.90341692867404,
]


std_data_ac_1 = [
    0.002,
    0.0091854510675532,
    0.0045651081725214,
    0.0036413018899031,
    0.0022490673701862,
    0.013713926887955,
    0.01,
    0.0075234581250095,
]


std_data_f1_1 = [
    0.004,
    0.014297828819042,
    0.0097724770007489,
    0.0055219169031932,
    0.0031581590455,
    0.01960426897501,
    0.01,
    0.020028402563558,
]


accuracy_2 = [x * 100 for x in accuracy_1]
f1_score_2 = [x * 100 for x in f1_1]
std_data_ac_2 = [x * 100 for x in std_data_ac_1]
std_data_f1_2 = [x * 100 for x in std_data_f1_1]

plot_data = []
plot_data_2 = []

for i, j in enumerate(accuracy_2):
    if i != 0:
        plot_data.append(
            accuracy_2[0] + std_data_ac_2[0] - accuracy_2[i] - std_data_ac_2[i]
        )
    if i != 0:
        plot_data_2.append(
            f1_score_2[0] + std_data_f1_2[0] - f1_score_2[i] - std_data_f1_2[i]
        )


plt.plot(
    plot_data,
    label="Accuracy CA",
)
plt.plot(x, plot_data_2, label="F1-Score CA")

# # Creating a box plot
# plt.errorbar(
#     x,
#     accuracy_2,
#     yerr=std_data_ac_2,
#     fmt="-o",
#     color="tab:orange",
#     ecolor="lightgray",
#     elinewidth=5,
#     capsize=0,
#     label="Accuracy",
# )

# plt.errorbar(
#     x,
#     f1_score_2,
#     yerr=std_data_f1_2,
#     fmt="-o",
#     color="tab:blue",
#     ecolor="lightgray",
#     elinewidth=5,
#     capsize=0,
#     label="F1-Score",
# )

for i in range(len(x)):
    plt.text(
        x[i],
        plot_data[i],
        f"{plot_data[i]:.1f}",
        fontsize=10,
        ha="left",
        va="bottom",
    )

for i in range(len(x)):
    plt.text(
        x[i],
        plot_data_2[i],
        f"{plot_data_2[i]:.1f}",
        fontsize=10,
        ha="left",
        va="bottom",
    )
# plt.gca().invert_xaxis()
# plt.xticks(x)
plt.axhline(y=5, color="red", linestyle="--", label="Threshold (5%)")

# Adding labels and title
plt.xlabel("Number of channels")
plt.ylabel("Metric difference with 16 channels (%)")
plt.title("Animal 1 - ENGNet100K - 100ms - 4 classes")


# x = [
#     "15 - 10",
#     "14 - 11",
#     "13 - 7",
#     "12 - 9",
#     "11 - 5",
#     "10 - 15",
#     "9 - 14",
#     "8 - 0",
# ]

# accuracy_1 = [
#     0.993,
#     0.98901795,
#     0.98475282,
#     0.98042041,
#     0.97565817,
#     0.97050610,
#     0.96736621,
#     0.961954361,
#     # 0.942852,
# ]

# f1_1 = [
#     0.985,
#     0.9822098,
#     0.9768506,
#     0.9681791,
#     0.9644779,
#     0.95510062,
#     0.9505889,
#     0.9425473,
#     # 0.9161532,
# ]


# std_data_ac_1 = [
#     0.002,
#     0.002499003,
#     0.002869618,
#     0.003067728,
#     0.005147021,
#     0.005147721,
#     0.003418154,
#     0.002530038,
#     # 0.004181659,
# ]


# std_data_f1_1 = [
#     0.004,
#     0.004389057,
#     0.003043836,
#     0.006778012,
#     0.008127111,
#     0.009083839,
#     0.006526623,
#     0.004209037,
#     # 0.00914046,
# ]

# accuracy_2 = [x * 100 for x in accuracy_1]
# f1_score_2 = [x * 100 for x in f1_1]
# std_data_ac_2 = [x * 100 for x in std_data_ac_1]
# std_data_f1_2 = [x * 100 for x in std_data_f1_1]

# plot_data = []
# plot_data_2 = []

# for i, j in enumerate(accuracy_2):
#     if i != 0:
#         plot_data.append(
#             accuracy_2[0] + std_data_ac_2[0] - accuracy_2[i] - std_data_ac_2[i]
#         )
#     if i != 0:
#         plot_data_2.append(
#             f1_score_2[0] + std_data_f1_2[0] - f1_score_2[i] - std_data_f1_2[i]
#         )


# plt.plot(
#     plot_data,
#     label="Accuracy XCDC",
# )
# plt.plot(x, plot_data_2, label="F1-Score XCDC")

# # # Creating a box plot
# # plt.errorbar(
# #     x,
# #     accuracy_2,
# #     yerr=std_data_ac_2,
# #     fmt="-o",
# #     color="tab:orange",
# #     ecolor="lightgray",
# #     elinewidth=5,
# #     capsize=0,
# #     label="Accuracy",
# # )

# # plt.errorbar(
# #     x,
# #     f1_score_2,
# #     yerr=std_data_f1_2,
# #     fmt="-o",
# #     color="tab:blue",
# #     ecolor="lightgray",
# #     elinewidth=5,
# #     capsize=0,
# #     label="F1-Score",
# # )

# for i in range(len(x)):
#     plt.text(
#         x[i],
#         plot_data[i],
#         f"{plot_data[i]:.1f}",
#         fontsize=10,
#         ha="left",
#         va="bottom",
#     )

# for i in range(len(x)):
#     plt.text(
#         x[i],
#         plot_data_2[i],
#         f"{plot_data_2[i]:.1f}",
#         fontsize=10,
#         ha="left",
#         va="bottom",
#     )
plt.legend()
plt.show()


"""
x = [
    "16 - 6",
    "15 - 10",
    "14 - 11",
    "13 - 7",
    "12 - 9",
    "11 - 5",
    "10 - 15",
    "9 - 14,
    "8 - 0",
]

accuracy_1 = [
    0.993,
    0.98901795,
    0.98475282,
    0.98042041,
    0.97565817,
    0.97050610,
    0.96736621,
    0.961954361,
    0.942852,
]

f1_1 = [
    0.991,
    0.9822098,
    0.9768506,
    0.9681791,
    0.9644779,
    0.95510062,
    0.9505889,
    0.9425473,
    0.9161532,
]



std_data_ac_1 = [
    0.002,
    0.002499003,
    0.002869618,
    0.003067728,
    0.005147021,
    0.005147721,
    0.003418154,
    0.002530038,
    0.004181659,
]


std_data_f1_1 = [
    0.002,
    0.004389057,
    0.003043836,
    0.006778012,
    0.008127111,
    0.009083839,
    0.006526623,
    0.004209037,
    0.00914046,
]




















x = [
    "16 - 10",
    "15 - 6",
    "14 - 11",
    "13 - 3",
    "12 - 14",
    "11 - 7",
    "10 - 0",
    "9 - 2,
    "8 - 15",
]


data = [0.8532, 0.8485, 0.8471, 0.842, 0.8367, 0.832, 0.8285, 0.8123, 0.8178, 0.7361]
data_2 = [0.8279, 0.8242, 0.817, 0.8194, 0.8154, 0.8076, 0.8069, 0.7919, 0.7963, 0.7184]


std_data = [
    0.005128203,
    0.006858865,
    0.005365904,
    0.007093232,
    0.004287042,
    0.007487694,
    0.005618573,
    0.011471681,
    0.009159471,
    0.006235253,
]

std_data_2 = [
    0.006044684,
    0.007350249,
    0.00705451,
    0.007617024,
    0.003320661,
    0.007184426,
    0.005864662,
    0.009475886,
    0.012247129,
    0.007207906,
]

################## ENG ##################

data = [0.9464043335867379, 0.9396584436225946, 0.9314982510339968, 0.9262918811935275, 0.9237497057233399, 0.914705482552741, 0.8997354631774091, 0.8870559874760806, 0.879496194086907]
data_2 = [0.9390852305711401, 0.9303200054569715, 0.9195986884295722, 0.913551346110745, 0.008564975370281471, 0.8998439359368529, 0.8804957388071473, 0.864608563773017, 0.8558930096611113]


std_data = [
    0.006498295915833376,
    0.003129950060313461
    0.004444134169539255,
    0.004454005234891615,
   0.00706025330818356,
    0.0023488592386216937,
   0.0038192192502467816,
   0.004029053523111094,
    0.0017289604548368627,
]

std_data_2 = [
    0.006147485402670293,
    0.003833479219934574,
   0.006868482947473986,
    0.004755662903513759,
    0.9081774276930488,
    0.004250951875398992,
   0.005102983365689285,
    0.00581158430611603,
    0.004605609097349754,




accuracy_3 = [
    0.908,
 	0.82570093457944,
    0.83401869158879,
0.83644859813084,
 0.81803738317757,
0.81822429906542,
 0.80915887850467,
 0.79411214953271,
]

f1_3 = [
    0.835,
  0.79549485609638,
0.80585132380615,
0.81005508609515,
 0.79349388420273,
 0.79122142328076,
 0.78155340932239,
 0.7548556289874,
]



std_data_ac_3 = [
    0.006,
  0.030893470157691,
0.019083279156535,
0.017278349380765,
 0.012778814680476,
0.010246332765358,
 0.0084454133439868,
 0.027872725221081,
]


std_data_f1_3 = [
    0.013,
  0.038892506032831
0.01623983654977,
0.015806671648423,
 0.0064245481943134,
 0.014787605684367,
 0.012159336070636,
 0.038827688986037,
]






accuracy_1 = [
    0.993,
0.9837786259542.
0.98075699745547,
0.97829198473282,
0.9772582697201,
 0.96202290076336,
 0.95,
0.94274809160305,

]

f1_1 = [
    0.985,
0.9742539879908,
0.96777892624749,
0.9684566012379,
0.96288219069893,
 0.9431183870378,
 0.92,
 0.90341692867404,
]


std_data_ac_1 = [
    0.002,
0.0091854510675532,
0.0045651081725214,
0.0036413018899031,
0.0022490673701862,
 0.013713926887955,
 0.01,
0.0075234581250095,

]


std_data_f1_1 = [
    0.004,
0.014297828819042,
0.0097724770007489,
0.0055219169031932,
0.0031581590455,
0.01960426897501,
 0.01,
0.020028402563558,

]




"""
